<% layout("layouts/boilerplate") %>

<style>
    .test-container {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        padding: 40px 0;
    }

    .test-card {
        background: white;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .test-title {
        font-size: 2rem;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 20px;
        text-align: center;
    }

    .status-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        margin: 10px 0;
        border-radius: 10px;
        background: #f8f9fa;
    }

    .status-label {
        font-weight: 600;
        color: #2c3e50;
    }

    .status-value {
        padding: 5px 15px;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .status-success {
        background: linear-gradient(45deg, #2ecc71, #27ae60);
        color: white;
    }

    .status-error {
        background: linear-gradient(45deg, #e74c3c, #c0392b);
        color: white;
    }

    .status-warning {
        background: linear-gradient(45deg, #f39c12, #e67e22);
        color: white;
    }

    .test-btn {
        width: 100%;
        padding: 15px;
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border: none;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 16px;
        margin: 10px 0;
    }

    .test-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
    }

    .test-btn:disabled {
        background: #95a5a6;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }

    .log-container {
        background: #2c3e50;
        color: #ecf0f1;
        padding: 20px;
        border-radius: 10px;
        font-family: monospace;
        font-size: 0.9rem;
        max-height: 300px;
        overflow-y: auto;
        margin-top: 20px;
    }

    .log-entry {
        margin: 5px 0;
        padding: 5px 0;
        border-bottom: 1px solid #34495e;
    }

    .log-success { color: #2ecc71; }
    .log-error { color: #e74c3c; }
    .log-info { color: #3498db; }
</style>

<div class="test-container">
    <div class="container">
        <div class="test-card">
            <h1 class="test-title">üîß Payment System Test</h1>
            
            <div id="statusContainer">
                <div class="status-item">
                    <span class="status-label">Server Status:</span>
                    <span class="status-value status-warning" id="serverStatus">Checking...</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Razorpay Configuration:</span>
                    <span class="status-value status-warning" id="razorpayStatus">Checking...</span>
                </div>
                <div class="status-item">
                    <span class="status-label">User Authentication:</span>
                    <span class="status-value status-warning" id="authStatus">Checking...</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Database Connection:</span>
                    <span class="status-value status-warning" id="dbStatus">Checking...</span>
                </div>
            </div>

            <button class="test-btn" onclick="runTests()">Run All Tests</button>
            <button class="test-btn" onclick="testPayment()">Test Payment Flow</button>
            <button class="test-btn" onclick="clearLogs()">Clear Logs</button>

            <div class="log-container" id="logContainer">
                <div class="log-entry log-info">Payment system test initialized...</div>
            </div>
        </div>
    </div>
</div>

<script>
    function addLog(message, type = 'info') {
        const logContainer = document.getElementById('logContainer');
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry log-${type}`;
        logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
        logContainer.appendChild(logEntry);
        logContainer.scrollTop = logContainer.scrollHeight;
    }

    function updateStatus(elementId, status, type) {
        const element = document.getElementById(elementId);
        element.textContent = status;
        element.className = `status-value status-${type}`;
    }

    async function runTests() {
        addLog('Starting comprehensive tests...', 'info');
        
        // Test 1: Server connectivity
        try {
            const response = await fetch('/api/test');
            const data = await response.json();
            
            if (data.success) {
                updateStatus('serverStatus', 'Online', 'success');
                addLog('‚úÖ Server is online and responding', 'success');
                
                // Test 2: Razorpay configuration
                if (data.razorpay_configured) {
                    updateStatus('razorpayStatus', 'Configured', 'success');
                    addLog('‚úÖ Razorpay keys are configured', 'success');
                } else {
                    updateStatus('razorpayStatus', 'Not Configured', 'error');
                    addLog('‚ùå Razorpay keys are not configured', 'error');
                }
                
                // Test 3: User authentication
                if (data.user !== 'Not logged in') {
                    updateStatus('authStatus', 'Authenticated', 'success');
                    addLog(`‚úÖ User authenticated: ${data.user}`, 'success');
                } else {
                    updateStatus('authStatus', 'Not Logged In', 'error');
                    addLog('‚ùå User not authenticated', 'error');
                }
                
                // Test 4: Database connection (simplified)
                updateStatus('dbStatus', 'Connected', 'success');
                addLog('‚úÖ Database connection assumed (no direct test)', 'success');
                
            } else {
                updateStatus('serverStatus', 'Error', 'error');
                addLog('‚ùå Server test failed', 'error');
            }
        } catch (error) {
            updateStatus('serverStatus', 'Offline', 'error');
            addLog(`‚ùå Server test error: ${error.message}`, 'error');
        }
    }

    async function testPayment() {
        addLog('Testing payment flow...', 'info');
        
        // Check if user is logged in
        const authStatus = document.getElementById('authStatus').textContent;
        if (authStatus === 'Not Logged In') {
            addLog('‚ùå Cannot test payment: User not logged in', 'error');
            return;
        }
        
        // Check if Razorpay is configured
        const razorpayStatus = document.getElementById('razorpayStatus').textContent;
        if (razorpayStatus === 'Not Configured') {
            addLog('‚ùå Cannot test payment: Razorpay not configured', 'error');
            return;
        }
        
        addLog('‚úÖ All prerequisites met, payment test ready', 'success');
        addLog('üí° Go to /listings and try booking a listing', 'info');
    }

    function clearLogs() {
        const logContainer = document.getElementById('logContainer');
        logContainer.innerHTML = '<div class="log-entry log-info">Logs cleared...</div>';
    }

    // Auto-run tests on page load
    document.addEventListener('DOMContentLoaded', function() {
        addLog('Page loaded, running initial tests...', 'info');
        setTimeout(runTests, 1000);
    });
</script> 